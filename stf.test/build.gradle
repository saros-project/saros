sarosEclipse {
  manifest = file('META-INF/MANIFEST.MF')
  excludeManifestDependencies = ['org.junit', 'saros.eclipse', 'saros.core']
  addDependencies = true
}

configurations {
    stfTest
}

sourceSets {
    stfTest {
        java.srcDir 'test'
    }
}

dependencies {
    stfTestCompile project(':saros.stf')
    stfTestCompile project(path: ':saros.stf', configuration: 'testing')
    stfTestCompile configurations.testConfig
    // TODO: The custom saros eclipse plugin adds all dependencies to implementation
    stfTestCompile configurations.implementation
    testCompile configurations.stfTestCompile // for running the tests in eclipse
}

// TODO move into buildSrc
task stfTest (type: Test, dependsOn: [':saros.eclipse:build']) {
    group 'Verification'
    description 'Runs the stf tests. Requires a corresponding test environment'

    testClassesDirs = sourceSets.stfTest.output.classesDirs

    systemProperty 'saros.stf.client.configuration.files', System.getProperty('stf.client.configuration.files', '')

    classpath = sourceSets.stfTest.runtimeClasspath

    testLogging {
        showStandardStreams = true
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
    // Print summary of failed tests
    ext.failedStfTests = []
    afterTest { descriptor, result ->
        if(result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE){
            ext.failedStfTests << "${descriptor.className}.${descriptor.name}"
        }
    }
    afterSuite { suite, result ->
        if (!suite.parent && !ext.failedStfTests.isEmpty()) {
            logger.lifecycle("Failed tests:")
            ext.failedStfTests.each { logger.lifecycle(it) }
        }
    }

    include '**/stf/test/**/*Test.*'
    exclude '**/stf/test/stf/**'
    exclude '**/whiteboard/**'
}
