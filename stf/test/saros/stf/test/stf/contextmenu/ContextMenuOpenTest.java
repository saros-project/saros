package saros.stf.test.stf.contextmenu;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static saros.stf.client.tester.SarosTester.ALICE;
import static saros.stf.shared.Constants.CM_OPEN_WITH_TEXT_EDITOR;
import static saros.stf.shared.Constants.SUFFIX_JAVA;

import java.rmi.RemoteException;
import org.junit.After;
import org.junit.BeforeClass;
import org.junit.Test;
import saros.stf.client.StfTestCase;
import saros.stf.test.stf.Constants;

public class ContextMenuOpenTest extends StfTestCase {

  @BeforeClass
  public static void selectTesters() throws Exception {
    select(ALICE);
  }

  @After
  public void afterEveryTest() throws Exception {
    clearWorkspaces();
  }

  /**
   * ********************************************
   *
   * <p>all related actions with the sub menus of the context menu "Open"
   *
   * <p>********************************************
   */
  @Test
  public void testOpenFile() throws RemoteException {
    ALICE.superBot().views().packageExplorerView().tree().newC().javaProject(Constants.PROJECT1);
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectProject(Constants.PROJECT1)
        .newC()
        .folder(Constants.FOLDER1);
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFolder(Constants.PROJECT1, Constants.FOLDER1)
        .newC()
        .file(Constants.FILE1);
    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.FILE1));
    ALICE.remoteBot().editor(Constants.FILE1).closeWithSave();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.FILE1));
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFile(Constants.PROJECT1, Constants.FOLDER1, Constants.FILE1)
        .open();

    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.FILE1));

    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFile(Constants.PROJECT1, Constants.FOLDER1, Constants.FILE1)
        .delete();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.FILE1));
  }

  @Test
  public void testOpenClass() throws RemoteException {
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .tree()
        .newC()
        .javaProjectWithClasses(Constants.PROJECT1, Constants.PKG1, Constants.CLS1);
    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
    ALICE.remoteBot().editor(Constants.CLS1 + SUFFIX_JAVA).closeWithSave();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectClass(Constants.PROJECT1, Constants.PKG1, Constants.CLS1)
        .open();
    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));

    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectClass(Constants.PROJECT1, Constants.PKG1, Constants.CLS1)
        .delete();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
  }

  @Test
  public void testOpenClassWith() throws RemoteException {
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .tree()
        .newC()
        .javaProjectWithClasses(Constants.PROJECT1, Constants.PKG1, Constants.CLS1);
    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
    ALICE.remoteBot().editor(Constants.CLS1 + SUFFIX_JAVA).closeWithSave();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectClass(Constants.PROJECT1, Constants.PKG1, Constants.CLS1)
        .openWith(CM_OPEN_WITH_TEXT_EDITOR);

    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));

    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectClass(Constants.PROJECT1, Constants.PKG1, Constants.CLS1)
        .delete();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.CLS1_SUFFIX));
  }

  @Test
  public void testOpenFileWith() throws RemoteException {
    ALICE.superBot().views().packageExplorerView().tree().newC().javaProject(Constants.PROJECT1);
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectProject(Constants.PROJECT1)
        .newC()
        .folder(Constants.FOLDER1);
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFolder(Constants.PROJECT1, Constants.FOLDER1)
        .newC()
        .file(Constants.FILE1);
    ALICE.remoteBot().editor(Constants.FILE1).closeWithSave();
    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFile(Constants.PROJECT1, Constants.FOLDER1, Constants.FILE1)
        .openWith(CM_OPEN_WITH_TEXT_EDITOR);

    assertTrue(ALICE.remoteBot().isEditorOpen(Constants.FILE1));

    ALICE
        .superBot()
        .views()
        .packageExplorerView()
        .selectFile(Constants.PROJECT1, Constants.FOLDER1, Constants.FILE1)
        .delete();
    assertFalse(ALICE.remoteBot().isEditorOpen(Constants.FILE1));
  }
}
