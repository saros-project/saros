<?xml version="1.0" encoding="UTF-8"?>
<project name="saros-i" default="all">

    <property file="build.properties"/>
    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->
    <property name="test.haltonfailure" value="off" />

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value="-encoding UTF-8"/>
    <property name="compiler.max.memory" value="256m"/>

    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.lib/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/.bundle/**"/>
        <exclude name="**/*.rbc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.apk"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.ane"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
    </patternset>
    <patternset id="html.resources">
        <exclude name="**/?*.html"/>
        <exclude name="**/?*.css"/>
        <exclude name="**/?*.js"/>
    </patternset>


    <!-- =================================
          JDK definitions
         ================================= -->

    <property name="jdk.bin" value="${jdk.home}/bin"/>
    <path id="jdk.classpath">
        <fileset dir="${jdk.home}" includes="jre/lib/**/*.jar"/>
    </path>

    <property name="jdk.bin.idea_sdk" value="${jdk.bin}"/>

    <path id="jdk.classpath.idea_sdk">
        <fileset dir="${idea.home}"
                 includes="lib/**/*.jar"
                 excludes="lib/junit*.jar, lib/picocontainer.jar, lib/ant/**/*.jar"/>
    </path>

    <property name="project.jdk.home" value="${idea.home}"/>
    <property name="project.jdk.bin" value="${jdk.bin.idea_sdk}"/>


    <!-- =================================
          Directories to use
         ================================= -->

    <property name="build.dir" value="${basedir}/bin"/>

    <!-- - - - - - - - - - - - - - - - - -
          Saros Core
         - - - - - - - - - - - - - - - - - -->

    <property name="core.basedir"
              value="${basedir}/../de.fu_berlin.inf.dpp.core"/>
    <property name="core.libdir" value="${core.basedir}/lib"/>

    <property name="core.build.dir" value="${build.dir}/core/"/>
    <property name="core.output.dir" value="${core.build.dir}/main"/>
    <property name="core.testoutput.dir" value="${core.build.dir}/test"/>

    <path id="core.main.classpath">
        <fileset dir="${core.libdir}"
                 includes="*.jar"
                 excludes="xstream*.jar"/>
        <fileset dir="${idea.home}/lib"
                 includes="xstream*.jar" />
    </path>

    <path id="core.main.sourcepath">
        <dirset dir="${core.basedir}">
            <include name="src"/>
            <include name="patches"/>
        </dirset>
    </path>

    <path id="core.test.classpath">
        <path refid="core.main.classpath"/>
        <pathelement location="${core.output.dir}"/>
        <path refid="libraries.test.classpath"/>

        <!-- necessary because the core test utilities need to be compiled
             outside of a junit ant task -->
        <fileset dir="${basedir}/lib" includes="junit*.jar"/>
    </path>

    <path id="core.test.sourcepath">
        <dirset dir="${core.basedir}/test">
            <!-- only compile the test utilities -->
            <include name="**/test/"/>
        </dirset>
    </path>

    <!-- - - - - - - - - - - - - - - - - -
          Saros UI
         - - - - - - - - - - - - - - - - - -->

    <property name="ui.basedir" value="${basedir}/../de.fu_berlin.inf.dpp.ui"/>
    <property name="ui.libdir" value="${ui.basedir}/lib"/>
    <property name="ui.output.dir" value="${ui.basedir}/bin"/>

    <!-- - - - - - - - - - - - - - - - - -
          Saros IntelliJ plugin
         - - - - - - - - - - - - - - - - - -->

    <dirname property="saros-i.basedir" file="${ant.file}"/>
    <property name="saros-i.libdir" value="${basedir}/lib"/>

    <property name="saros-i.build.dir" value="${build.dir}/saros-i"/>
    <property name="saros-i.output.dir" value="${saros-i.build.dir}/main"/>
    <property name="saros-i.testoutput.dir" value="${saros-i.build.dir}/test"/>
    <property name="saros-i.artifacts.dir"
              value="${saros-i.build.dir}/artifacts"/>

    <path id="saros-i.main.classpath">
        <pathelement location="${core.output.dir}"/>
        <pathelement location="${ui.output.dir}"/>
        <path refid="libraries.classpath"/>
        <path refid="jdk.classpath.idea_sdk"/>
    </path>

    <path id="saros-i.main.sourcepath">
        <dirset dir="${saros-i.basedir}">
            <include name="src"/>
        </dirset>
    </path>

    <path id="saros-i.test.classpath">
        <path refid="libraries.test.classpath"/>
        <path refid="saros-i.main.classpath"/>
        <pathelement location="${saros-i.output.dir}"/>
        <pathelement location="${core.testoutput.dir}"/>
    </path>

    <property name="saros-i.test.dir" value="${saros-i.basedir}/test/junit"/>

    <path id="saros-i.test.sourcepath">
        <dirset dir="${saros-i.test.dir}"/>
    </path>

    <property name="saros-i.junit.report.dir"
              value="${saros-i.build.dir}/junit"/>

    <property name="saros-i.plugin.path.jar"
              value="${saros-i.artifacts.dir}/de.fu_berlin.inf.dpp.intellij.jar"/>
    <property name="saros-i.bundle.path.zip"
              value="${saros-i.artifacts.dir}/de.fu_berlin.inf.dpp.intellij.zip"/>

    <property name="saros-i.instr.dir" value="${saros-i.build.dir}/instr"/>

    <property name="saros-i.cobertura.report.dir"
              value="${saros-i.build.dir}/cobertura"/>
    <property name="saros-i.cobertura.datafile"
              value="${saros-i.cobertura.report.dir}/cobertura.ser"/>


    <!-- =================================
          Libraries
         ================================= -->

    <!-- - - - - - - - - - - - - - - - - -
          Project Libraries
         - - - - - - - - - - - - - - - - - -->

    <path id="libraries.classpath">
        <fileset dir="${core.libdir}" includes="*.jar" excludes="xstream*.jar"/>
        <fileset dir="${ui.libdir}" includes="*.jar"/>
        <fileset dir="${saros-i.libdir}" includes="*.jar"/>
        <fileset dir="${eclipse.dir}/plugins" includes="org.eclipse.swt.*.jar"
                 excludes="org.eclipse.swt.*source*.jar"/>
    </path>

    <path id="libraries.test.classpath">
        <fileset dir="${basedir}/test/lib"/>
    </path>

    <!-- - - - - - - - - - - - - - - - - -
          Register Custom Compiler Taskdefs
         - - - - - - - - - - - - - - - - - -->

    <property name="javac2.home" value="${idea.home}/lib"/>
    <path id="javac2.classpath">
        <!-- TODO Upgrade build server to IntelliJ 13.1.7 -->
        <!-- Newer version of asm, contained in IntelliJ 13.1.7 -->
        <pathelement location="${javac2.home}/asm-all.jar"/>
        <!-- Fall-back version, e.g. for IntelliJ 13.1.1 -->
        <pathelement location="${javac2.home}/asm4-all.jar"/>

        <pathelement location="${javac2.home}/javac2.jar"/>
        <pathelement location="${javac2.home}/jdom.jar"/>
        <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
    </path>
    <target name="register.custom.compilers">
        <taskdef name="javac2" classname="com.intellij.ant.Javac2"
                 classpathref="javac2.classpath"/>
        <taskdef name="instrumentIdeaExtensions"
                 classname="com.intellij.ant.InstrumentIdeaExtensions"
                 classpathref="javac2.classpath"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Cobertura setup
         - - - - - - - - - - - - - - - - - -->

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar"/>
            <include name="lib/**/*.jar"/>
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>


    <!-- =================================
          Own macros
         ================================= -->

    <macrodef name="compile-java">
        <attribute name="dest.dir"/>
        <attribute name="java.executable" default="${jdk.bin}/javac"/>
        <attribute name="compiler.args" default="${compiler.args}"/>
        <attribute name="classpath"/>
        <attribute name="sourcepath"/>

        <sequential>
            <mkdir dir="@{dest.dir}"/>

            <javac2 destdir="@{dest.dir}" debug="${compiler.debug}"
                    nowarn="${compiler.generate.no.warnings}"
                    memorymaximumsize="${compiler.max.memory}" fork="true"
                    executable="@{java.executable}">
                <compilerarg line="@{compiler.args}"/>
                <classpath refid="@{classpath}"/>
                <src refid="@{sourcepath}"/>
                <patternset refid="ignored.files"/>
            </javac2>
        </sequential>
    </macrodef>

    <macrodef name="copy-resources">
        <attribute name="dest.dir"/>
        <attribute name="src.dir"/>
        <attribute name="resource-refid" default="compiler.resources"/>
        <sequential>
            <copy todir="@{dest.dir}">
                <fileset dir="@{src.dir}">
                    <patternset refid="@{resource-refid}"/>
                    <type type="file"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>


    <!-- =================================
          Targets: Saros Core, Compilation
         ================================= -->

    <target name="compile.core" depends="compile.core.main,compile.core.tests"
            description="Compile core"/>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Saros Core productive code
         - - - - - - - - - - - - - - - - - -->

    <target name="compile.core.main" depends="register.custom.compilers"
            description="Compile core; main classes">
        <compile-java dest.dir="${core.output.dir}"
                      classpath="core.main.classpath"
                      sourcepath="core.main.sourcepath"/>
        <copy-resources dest.dir="${core.build.dir}"
                        src.dir="${core.basedir}/src"/>
        <copy-resources dest.dir="${core.build.dir}"
                        src.dir="${core.basedir}/patches"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Saros Core test code
         - - - - - - - - - - - - - - - - - -->

    <target name="compile.core.tests"
            depends="register.custom.compilers, compile.core.main"
            description="compile core; test classes" unless="skip.tests">
        <compile-java dest.dir="${core.testoutput.dir}"
                      classpath="core.test.classpath"
                      sourcepath="core.test.sourcepath"/>
        <copy-resources dest.dir="${core.testoutput.dir}"
                        src.dir="${core.basedir}/test/junit"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Saros Core cleaning
         - - - - - - - - - - - - - - - - - -->

    <target name="clean.core" description="cleanup core">
        <delete dir="${core.output.dir}" failonerror="false"/>
        <delete dir="${core.testoutput.dir}" failonerror="false"/>
    </target>


    <!-- =================================
          Targets: Saros IntelliJ plugin, Compilation
         ================================= -->

    <target name="compile.saros-i"
            depends="compile.saros-i.main,compile.saros-i.tests"
            description="Compile saros-i"/>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Compile Saros IntelliJ productive code
         - - - - - - - - - - - - - - - - - -->

    <target name="compile.saros-i.main"
            depends="register.custom.compilers, compile.core"
            description="Compile saros-i; main classes">
        <compile-java dest.dir="${saros-i.output.dir}"
                      classpath="saros-i.main.classpath"
                      sourcepath="saros-i.main.sourcepath"/>
        <copy-resources dest.dir="${saros-i.output.dir}"
                        src.dir="${saros-i.basedir}/src"/>
        <antcall target="copy-html-resources"/>
    </target>

    <target name="check-resources-availability">
        <available file="${ui.basedir}/resources" type="dir"
                   property="resources.exist"/>
    </target>

    <!-- TODO Who needs this? -->
    <target name="copy-html-resources" depends="check-resources-availability"
            if="resources.exist">
        <copy-resources dest.dir="${saros-i.output.dir}"
                        src.dir="${ui.basedir}/resources"
                        resource-refid="html.resources"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Compile Saros IntelliJ test code
         - - - - - - - - - - - - - - - - - -->

    <target name="compile.saros-i.tests"
            depends="register.custom.compilers, compile.saros-i.main"
            description="compile saros-i; test classes" unless="skip.tests">
        <compile-java dest.dir="${saros-i.testoutput.dir}"
                      classpath="saros-i.test.classpath"
                      sourcepath="saros-i.test.sourcepath"/>
        <copy-resources dest.dir="${saros-i.testoutput.dir}"
                        src.dir="${saros-i.basedir}/test/junit"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Clean Saros IntelliJ output
         - - - - - - - - - - - - - - - - - -->

    <target name="clean.saros-i" description="cleanup saros-i">
        <delete dir="${saros-i.build.dir}" failonerror="false"/>
        <delete dir="${saros-i.instr.dir}" failonerror="false"/>
    </target>


    <!-- =================================
          Targets: Saros IntelliJ plugin, Test Execution
         ================================= -->

    <target name="instrument">
        <mkdir dir="${saros-i.instr.dir}"/>

        <cobertura-instrument todir="${saros-i.instr.dir}"
                              datafile="${saros-i.cobertura.datafile}">

            <fileset dir="${saros-i.output.dir}">
                <include name="**/*.class"/>
            </fileset>

            <excludeClasses regex=".*\.stf\..*"/>

            <auxClasspath>
                <path refid="saros-i.test.classpath"/>
            </auxClasspath>
        </cobertura-instrument>
    </target>

    <target name="test" depends="compile.saros-i.tests, instrument"
            description="run saros-i unit tests">

        <mkdir dir="${saros-i.junit.report.dir}"/>
        <junit fork="yes" forkmode="once"
               jvm="${jdk.bin}/java" haltonfailure="${test.haltonfailure}" >

            <sysproperty key="net.sourceforge.cobertura.datafile"
                         value="${saros-i.cobertura.datafile}"/>

            <classpath location="${saros-i.instr.dir}"/>
            <classpath>
                <path refid="saros-i.test.classpath"/>
                <pathelement path="${saros-i.testoutput.dir}"/>
            </classpath>

            <classpath refid="cobertura.classpath"/>

            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>

            <batchtest todir="${saros-i.junit.report.dir}">
                <fileset dir="${saros-i.test.dir}">
                    <exclude name="**/Abstract*.java"/>
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report format="xml" datafile="${saros-i.cobertura.datafile}"
                          destdir="${saros-i.cobertura.report.dir}"
                          srcdir="${saros-i.basedir}/src"/>
    </target>


    <!-- =================================
          Targets: Saros IntelliJ plugin, Plugin Bundling
         ================================= -->

    <!-- - - - - - - - - - - - - - - - - -
          Target: Build archive for Saros IntelliJ plugin
         - - - - - - - - - - - - - - - - - -->

    <target name="plugin.build.jar.saros-i" depends="compile.saros-i"
            description="Build plugin archive for &#39;saros-i&#39;">
        <mkdir dir="${saros-i.artifacts.dir}"/>
        <jar destfile="${saros-i.plugin.path.jar}" duplicate="preserve">
            <zipfileset dir="${core.output.dir}"/>
            <zipfileset dir="${ui.output.dir}"/>
            <zipfileset dir="${saros-i.output.dir}"/>
            <zipfileset file="${saros-i.basedir}/META-INF/plugin.xml"
                        prefix="META-INF"/>
            <zipfileset dir="${saros-i.basedir}/resources"/>
            <manifest>
                <attribute name="Created-By" value="IntelliJ IDEA"/>
                <attribute name="Manifest-Version" value="1.0"/>
            </manifest>
        </jar>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          Target: Bundle archive ready for installation
         - - - - - - - - - - - - - - - - - -->

    <target name="plugin.bundle.zip.saros-i" depends="plugin.build.jar.saros-i"
            description="Build plugin archive ready for installation">
        <zip destfile="${saros-i.bundle.path.zip}" duplicate="preserve">
            <zipfileset dir="${ui.libdir}"
                        prefix="de.fu_berlin.inf.dpp.intellij/lib"
                        excludes="*-src.zip,*-debug.jar"/>
            <zipfileset dir="${core.libdir}"
                        prefix="de.fu_berlin.inf.dpp.intellij/lib"
                        excludes="*-sources.jar,xstream*.jar"/>
            <zipfileset dir="${idea.home}/lib"
                        prefix="de.fu_berlin.inf.dpp.intellij/lib"
                        includes="xstream*.jar"/>
            <zipfileset file="${saros-i.plugin.path.jar}"
                        prefix="de.fu_berlin.inf.dpp.intellij/lib"/>
        </zip>
    </target>


    <!-- =================================
          Targets: Top-Level Targets
         ================================= -->

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean" depends="clean.core, clean.saros-i"
            description="cleanup all">
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="compile-main"
            depends="compile.core.main, compile.saros-i.main"/>
    <target name="compile-tests"
            depends="compile.core.tests, compile.saros-i.tests"/>
    <target name="compile" depends="compile-main, compile-tests"/>

    <target name="build"
            depends="init, clean, compile, test, plugin.bundle.zip.saros-i"
            description="build all"/>

    <target name="all" depends="build" description="build all"/>
</project>
