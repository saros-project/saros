buildscript
{
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

// Use gradle scan plugin and service in order to visualize build/test failures

if (project.hasProperty('useBuildScan') && useBuildScan.equalsIgnoreCase("true")) {
  buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishOnFailure()
  }
}

// Adjust Intellij module configuration for all sub-projects
configure(subprojects) {projectToConf->
  apply plugin: 'idea'

  idea{
    module{
      excludeDirs += [file("bin"), file("lib"), file("libs")]
    }
  }
}


ext.projectsToConfigure = subprojects - project(':saros.picocontainer')

// Configurations that are specific to all subprojects
configure(projectsToConfigure) { projectToConf ->

  apply plugin: 'java' // default java build plugin
  apply plugin: 'saros.gradle.eclipse.plugin'

  repositories {
    // general purpose repository
    mavenCentral()
  }

  configurations {
    testing // used to reference the testJar
    testConfig // contains test dependencies that are used by all java subprojects
    releaseDep // contains all dependencies which has to be included into the release jar/zip
    // avoid that the whole dependency tree is released
    releaseDep.transitive = false
  }

  test {

    // Exclude test suites if property is set. Otherwise tests are executed multiple times
    // in the ci server (via test class and suite).
    // see gradle.properties for default values
    if (projectToConf.hasProperty('skipTestSuites') && skipTestSuites.equalsIgnoreCase("true")) {
      exclude '**/*TestSuite*'
    }

    /*
     * Exclude STF tests if property is set. Otherwise the STF self-tests (which are reliant on test
     * workers to function properly) are also run when executing the 'test' task to run all Saros
     * test.
     */
    if (project.hasProperty('skipSTFTests') && skipSTFTests.equalsIgnoreCase("true")) {
      exclude 'saros/stf/test/stf/*'
    }

    // Don't execute abstract test classes
    exclude '**/Abstract*'

    testLogging {
       showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  projectToConf.ext.junitVersion = 'junit:junit:4.12'
  projectToConf.ext.log4jVersion = 'log4j:log4j:1.2.15'
  projectToConf.ext.addLog4JDependency = { config ->
    config.dependencies.add(dependencies.create('log4j:log4j:1.2.15') {
      exclude group: 'com.sun.jmx', module: 'jmxri'
      exclude group: 'com.sun.jdmk', module: 'jmxtools'
      exclude group: 'javax.jms', module: 'jms'
    })
  }

  dependencies {
    addLog4JDependency(configurations.testConfig)
    testConfig junitVersion
    testConfig 'org.easymock:easymock:3.5.1'
    testConfig 'org.powermock:powermock-core:2.0.0'
    testConfig 'org.powermock:powermock-module-junit4:2.0.0'
    testConfig 'org.powermock:powermock-api-easymock:2.0.0'
  }

  // generate lib directory that contains all release dependencies
  // This is necessary to enable eclipse to run the stf tests, because
  // eclipse uses the path of the MANIFEST.MF and is not compatible with
  // gradle dependency resolution
  task generateLib(type: Copy) {
    into "${project.projectDir}/lib"
    from projectToConf.configurations.releaseDep
  }

  projectToConf.ext.intellijHome = projectToConf.hasProperty('intellijHome') ? intellijHome : System.getenv('INTELLIJ_HOME')
  projectToConf.ext.intellijSandboxDir = System.getenv('SAROS_INTELLIJ_SANDBOX')
}

// remove all build dirs. The frontend package has no build directory
task cleanAll(dependsOn: projectsToConfigure.collect{":${it.name}:clean"})

ext.projectsToPrepare = projectsToConfigure + project(':saros.picocontainer') 
task prepareEclipse(dependsOn: projectsToPrepare.collect { [":${it.name}:cleanEclipseProject", ":${it.name}:cleanEclipseClasspath"] }.flatten() +
                               projectsToPrepare.collect { [":${it.name}:eclipseProject", ":${it.name}:eclipseClasspath"]}.flatten() +
                               ['generateLibAll'])

task cleanGenerateLibAll {
  doLast {
    project(':saros.eclipse').file('lib').deleteDir()
    project(':saros.core').file('lib').deleteDir()
    project(':saros.whiteboard').file('lib').deleteDir()
    project(':saros.stf').file('lib').deleteDir()
    project(':saros.stf.test').file('lib').deleteDir()
  }
}

// generate all lib dirs in order to run stf tests
task generateLibAll(dependsOn:['cleanGenerateLibAll',
                               ':saros.core:generateLib',
                               ':saros.eclipse:generateLib',
                               ':saros.stf:generateLib',
                               ':saros.stf.test:generateLib',
                               ':saros.whiteboard:generateLib'])

task sarosEclipse(type: Copy, dependsOn: [
  ':saros.picocontainer:test',
  ':saros.core:test',
  ':saros.eclipse:test',
  ':saros.eclipse:jar',
  ':saros.whiteboard:test',
  ':saros.whiteboard:jar'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Eclipse'

  from project(':saros.core').jar
  from project(':saros.eclipse').jar
  from project(':saros.whiteboard').jar
  into 'build/distribution/eclipse'
}

task sarosStf(type: Copy, dependsOn: ['sarosEclipse', 'saros.stf:jar']) {
  from project(':saros.stf').jar
  into 'build/distribution/eclipse'
}

task sarosServer(type: Copy, dependsOn: [
  ':saros.core:test',
  ':saros.server:test',
  ':saros.server:jar'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by the Saros Server'

  from project(':saros.server').jar
  into 'build/distribution/server'
}

task sarosLsp(type: Copy, dependsOn: [
  ':saros.core:test',
  ':saros.lsp:test',
  ':saros.lsp:jar'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by the Saros Language Server'

  from project(':saros.lsp').jar
  into 'build/distribution/lsp'
}

task sarosIntellij(type: Copy, dependsOn: [
  ':saros.picocontainer:test',
  ':saros.core:test',
  ':saros.intellij:test',
  ':saros.intellij:buildPlugin'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Intellij'

  from project(':saros.intellij').configurations.archives.artifacts.files
  include '*.zip'
  into 'build/distribution/intellij'
}
