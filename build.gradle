buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'com.gradle.build-scan' version '1.16'
  id 'org.sonarqube' version '2.6.2'
}

// Use gradle scan plugin and service in order to visualize build/test failures
buildScan {
 termsOfServiceUrl = 'https://gradle.com/terms-of-service'
 termsOfServiceAgree = 'yes'
 publishOnFailure()
}

sonarqube {
  properties {
    property 'sonar.preview.excludePlugins', 'devcockpit, jira, pdfreport, views, report, buildstability, scmactivity, buildbreaker, scmstats'
    property 'sonar.projectName', 'Saros/Complete'
    property 'sonar.projectKey', 'saros_complete'
    property 'sonar.projectDescription', 'The whole Saros product family'
    property 'sonar.projectVersion', '14.11.28.DEVEL'
    property 'sonar.cpd.cross_project', 'true'
  }
}

// Configurations that are specific to all subprojects
// de.fu_berlin.inf.dpp.ui.frontend is not a real subproject and contains
// only a build.gradle in order to allow to scan the sources of this subproject
configure(subprojects - project(':de.fu_berlin.inf.dpp.ui.frontend')) { project ->

  apply plugin: 'java' // default java build plugin
  apply plugin: 'jacoco' // code coverage tool
  apply plugin: 'osgi' // plugin that allows to use osgi manifests

  repositories {
    // required for ui build
    maven { url 'https://raw.githubusercontent.com/maven-eclipse/swt-repo/master' }
    maven { url 'https://maven.atlassian.com/3rdparty/' }
    mavenCentral()
  }

  configurations {
    testing // used to reference the testJar
    testConfig // contains test dependencies that are used by all java subprojects
    releaseDep // contains all dependencies which has to be included into the release jar/zip
    // avoid that the whole dependency tree is released
    releaseDep.transitive = false
  }

  test {
    testLogging {
       showStandardStreams = true
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  
  project.ext.log4jVersion = 'log4j:log4j:1.2.17'

  dependencies {
    compile log4jVersion

    testConfig junitVersion
    testConfig 'org.easymock:easymock:3.1'
    testConfig 'org.powermock:powermock-easymock-release-full:1.5.1'
    testConfig 'org.objenesis:objenesis:1.2'
    testConfig 'org.javassist:javassist:3.18.0-GA'
    testConfig 'cglib:cglib-nodep:2.2.2'
  }

  // generate lib directory that contains all release dependencies
  // This is necessary to enable eclipse to run the stf tests, because
  // eclipse uses the path of the MANIFEST.MF and is not compatible with
  // gradle dependency resolution
  task generateLib(type: Copy) {
    into "${project.projectDir}/lib"
    from project.configurations.releaseDep
  }

  project.ext.eclipsePluginDir = project.hasProperty('eclipseHome') ? eclipseHome : System.getenv('ECLIPSE_HOME')
  project.ext.eclipsePluginDir += '/plugins'
  project.ext.intellijHome = project.hasProperty('intellijHome') ? intellijHome : System.getenv('INTELLIJ_HOME')
}

task clean(type: Delete) {
  delete 'build'
}

// remove all build dirs. The frontend package has no build directory
task cleanAll(dependsOn: subprojects*.name.findAll{it != 'de.fu_berlin.inf.dpp.ui.frontend'}.collect{":$it:clean"} << 'clean') 

// generate all lib dirs in order to run stf tests
task generateLibAll(dependsOn:[':de.fu_berlin.inf.dpp.core:generateLib',
                               ':de.fu_berlin.inf.dpp.ui:generateLib',
                               ':de.fu_berlin.inf.dpp:generateLib',
                               ':de.fu_berlin.inf.dpp.whiteboard:generateLib'])

task sarosEclipse(type: Copy, dependsOn: [
  ':de.fu_berlin.inf.dpp.core:test',
  ':de.fu_berlin.inf.dpp.ui:test',
  ':de.fu_berlin.inf.dpp:test',
  ':de.fu_berlin.inf.dpp:jar',
  ':de.fu_berlin.inf.dpp.whiteboard:test',
  ':de.fu_berlin.inf.dpp.whiteboard:jar'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Eclipse'

  from project(':de.fu_berlin.inf.dpp.core').jar
  from project(':de.fu_berlin.inf.dpp.ui').jar
  from project(':de.fu_berlin.inf.dpp').jar
  from project(':de.fu_berlin.inf.dpp.whiteboard').jar
  into 'build/distribution/eclipse'
}

task sarosIntellij(type: Copy, dependsOn: [
  ':de.fu_berlin.inf.dpp.core:test',
  ':de.fu_berlin.inf.dpp.ui:test',
  ':de.fu_berlin.inf.dpp.intellij:test',
  ':de.fu_berlin.inf.dpp.intellij:buildPlugin'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Intellij'

  from project(':de.fu_berlin.inf.dpp.intellij').configurations.archives.artifacts.files
  include '*.zip'
  into 'build/distribution/intellij'
}
