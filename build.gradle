buildscript
{
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "de.monkeyworks.buildmonkey.mavenizer.MavenizerPlugin" version "0.4.2"
  id 'com.gradle.build-scan' version '2.0.2'
  id 'org.sonarqube' version '2.6.2'
}

// avoid that the buildmonkey plugin triggers verbose ant logging
ant.lifecycleLogLevel = "ERROR"

// Use gradle scan plugin and service in order to visualize build/test failures
buildScan {
 termsOfServiceUrl = 'https://gradle.com/terms-of-service'
 termsOfServiceAgree = 'yes'
 publishOnFailure()
}

// Configuration that leads to the conversion of the eclipse home dir
// (which is also a P2 repository) to a maven repository.
mavenize {
  mavenizeTask {
    useP2MirrorOutput = false
    sourceP2Repository = System.getenv('ECLIPSE_HOME')
    targetDir = rootProject.file('build/maven')
    groupId = 'eclipse-deps'
  }
}

sonarqube {
  properties {
    property 'sonar.preview.excludePlugins', 'devcockpit, jira, pdfreport, views, report, buildstability, scmactivity, buildbreaker, scmstats'
    property 'sonar.projectName', 'Saros/Complete'
    property 'sonar.projectKey', 'saros_complete'
    property 'sonar.projectDescription', 'The whole Saros product family'
    property 'sonar.projectVersion', '14.11.28.DEVEL'
    property 'sonar.cpd.cross_project', 'true'
  }
}

ext.projectsToConfigure = subprojects - project(':saros.ui.frontend')
// Configurations that are specific to all subprojects
// saros.ui.frontend is not a real subproject and contains
// only a build.gradle in order to allow to scan the sources of this subproject
configure(projectsToConfigure) { project ->

  apply plugin: 'eclipse'
  apply plugin: 'java' // default java build plugin
  apply plugin: 'jacoco' // code coverage tool

  repositories {
    // general purpose repository
    mavenCentral()
    // repositories for specific artifacts
    maven {
      url 'http://maven-eclipse.github.io/maven'
      content { includeGroup 'org.eclipse.swt' }
    }
  }

  configurations {
    testing // used to reference the testJar
    testConfig // contains test dependencies that are used by all java subprojects
    releaseDep // contains all dependencies which has to be included into the release jar/zip
    // avoid that the whole dependency tree is released
    releaseDep.transitive = false
  }

  test {

    // Exclude test suites if property is set. Otherwise tests are executed multiple times
    // in the ci server (via test class and suite).
    if (project.hasProperty('skipTestSuites') && skipTestSuites.equalsIgnoreCase("true")) {
      exclude '**/*TestSuite*'
    }
    exclude '**/Abstract*'

    testLogging {
       showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  }

  project.ext.junitVersion = 'junit:junit:4.11'
  project.ext.log4jVersion = 'log4j:log4j:1.2.15'

  dependencies {
    compile (log4jVersion) {
      exclude group: 'com.sun.jmx', module: 'jmxri'
      exclude group: 'com.sun.jdmk', module: 'jmxtools'
      exclude group: 'javax.jms', module: 'jms'
    }

    testConfig junitVersion
    testConfig 'org.easymock:easymock:3.1'
    testConfig 'org.powermock:powermock-easymock-release-full:1.5.1'
  }

  // generate lib directory that contains all release dependencies
  // This is necessary to enable eclipse to run the stf tests, because
  // eclipse uses the path of the MANIFEST.MF and is not compatible with
  // gradle dependency resolution
  task generateLib(type: Copy) {
    into "${project.projectDir}/lib"
    from project.configurations.releaseDep
  }

  project.ext.eclipseHome = project.hasProperty('eclipseHome') ? eclipseHome : System.getenv('ECLIPSE_HOME')
  project.ext.intellijHome = project.hasProperty('intellijHome') ? intellijHome : System.getenv('INTELLIJ_HOME')
}


// remove all build dirs. The frontend package has no build directory
task cleanAll(dependsOn: projectsToConfigure.collect{":${it.name}:clean"} << 'clean')

task prepareEclipse(dependsOn: projectsToConfigure.collect { [":${it.name}:cleanEclipseProject", ":${it.name}:cleanEclipseClasspath"] }.flatten() +
                               projectsToConfigure.collect { [":${it.name}:eclipseProject", ":${it.name}:eclipseClasspath"]}.flatten() +
                               ['mavenizeP2Repository', 'generateLibAll'])

task prepareIntellij(dependsOn: ['mavenizeP2Repository'])

task cleanGenerateLibAll {
  doLast {
    project(':saros.eclipse').file('lib').deleteDir()
    project(':saros.core').file('lib').deleteDir()
    project(':saros.whiteboard').file('lib').deleteDir()
    project(':saros.stf').file('lib').deleteDir()
    project(':saros.stf.test').file('lib').deleteDir()
    project(':saros.ui').file('lib').deleteDir()
  }
}

// generate all lib dirs in order to run stf tests
task generateLibAll(dependsOn:['cleanGenerateLibAll',
                               ':saros.core:generateLib',
                               ':saros.ui:generateLib',
                               ':saros.eclipse:generateLib',
                               ':saros.stf:generateLib',
                               ':saros.stf.test:generateLib',
                               ':saros.whiteboard:generateLib'])

task sarosEclipse(type: Copy, dependsOn: [
  'mavenizeP2Repository',
  ':saros.core:test',
  ':saros.ui:test',
  ':saros.eclipse:test',
  ':saros.eclipse:jar',
  ':saros.whiteboard:test',
  ':saros.whiteboard:jar'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Eclipse'

  from project(':saros.core').jar
  from project(':saros.ui').jar
  from project(':saros.eclipse').jar
  from project(':saros.whiteboard').jar
  into 'build/distribution/eclipse'
}

task sarosStf(type: Copy, dependsOn: ['sarosEclipse', 'saros.stf:jar']) {
  from project(':saros.stf').jar
  into 'build/distribution/eclipse'
}

task sarosServer(type: Copy, dependsOn: [
  ':saros.core:test',
  ':saros.server:test'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by the Saros Server'
}

task sarosIntellij(type: Copy, dependsOn: [
  ':saros.core:test',
  ':saros.ui:test',
  ':saros.intellij:test',
  ':saros.intellij:buildPlugin'
  ]) {
  group 'Delivery'
  description 'Builds and tests all modules required by Saros for Intellij'

  from project(':saros.intellij').configurations.archives.artifacts.files
  include '*.zip'
  into 'build/distribution/intellij'
}
