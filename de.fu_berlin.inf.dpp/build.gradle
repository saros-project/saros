configurations {
  stfTest
}

sourceSets {
  main.java.srcDirs = ['src',
                       'ext-src',
                       'test/framework/stf/src',
                       'test/framework/stf/test',
                       'test/junit',
                       'test/stf']

  main {
    resources {
      srcDir 'src'
      exclude '**/*.java'
    }
    resources {
      srcDir 'test/framework/stf/src'
      exclude '**/*.java'
    }
  }

  test {
    java.srcDir 'test/junit'
    resources.srcDir 'test/resources'
  }

  stfTest {
    java.srcDir 'test/stf'
    resources.srcDir 'test/resources'
  }
}

dependencies {
  compile project(':de.fu_berlin.inf.dpp.core')
  compile project(':de.fu_berlin.inf.dpp.ui')

  compile project(path: ':de.fu_berlin.inf.dpp.core', configuration: 'testing')
  compile project(path: ':de.fu_berlin.inf.dpp.ui', configuration: 'testing')

  compile fileTree(dir: eclipsePluginDir).matching {
    include '*.jar'
    exclude '*commons.lang*'
    exclude 'de.fu_berlin.*' // if the build is executed locally with a testing eclipse instance
    exclude '*junit_4.12*'
  }

  releaseDep log4jVersion
  releaseDep fileTree(dir: 'libs', include: '*.jar', exclude: '*source*.jar')

  // This is very ugly but necessary in order to build stf together with saros eclipse
  compile configurations.testConfig
  compile configurations.releaseDep

  stfTestCompile junitVersion
  stfTestCompile sourceSets.main.output
  stfTestCompile project(':de.fu_berlin.inf.dpp.core')
  stfTestCompile project(':de.fu_berlin.inf.dpp.ui')
  stfTestCompile project(path: ':de.fu_berlin.inf.dpp.ui', configuration: 'testing')
  stfTestCompile fileTree(dir: 'libs', include: '*.jar', exclude: '*source*.jar')
  stfTestCompile fileTree(dir: eclipsePluginDir).matching {
    include '*.jar'
    exclude '*commons.lang*'
    exclude 'de.fu_berlin.*'
  }
}

test {
  exclude '**/Abstract*'
}

task stfTest (type: Test, dependsOn: [':de.fu_berlin.inf.dpp:build']) {
  group 'Verification'
  description 'Runs the stf tests. Requires a corresponding test environment'

  testClassesDirs = sourceSets.stfTest.output.classesDirs

  systemProperty 'de.fu_berlin.inf.dpp.stf.client.configuration.files', System.getProperty('stf.client.configuration.files', '') 

  classpath = sourceSets.stfTest.runtimeClasspath

  testLogging {
       showStandardStreams = true
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
  }

  include '**/stf/test/**/*Test.*'
  exclude '**/stf/test/stf/**'
  exclude '**/whiteboard/**'
  exclude '**/*TestSuite*'
}

tasks.withType(Test) {
  enableAssertions = false
}

jar {
  manifest {
    from file('META-INF/MANIFEST.MF')
    attributes('-removeheaders': 'Import-Package')
  }
  from sourceSets.main.output

  into('lib') {
    from configurations.getByName('releaseDep')
  }
  into('assets') {
    from 'assets'
  }
  into('icons') {
    from 'icons'
  }
  into('test/resources') {
    from('test/resources')
  }
  from('.') {
    include '*.properties'
    include 'readme.html'
    include 'plugin.xml'
    include 'version.comp'
    include 'LICENSE'
    include 'CHANGELOG'
  }

  from('test/framework/stf/src/saros_stf.log4j.properties')

  into('META-INF')
  {
    from 'META-INF'
    include 'stun-config.xml'
  }
}

sonarqube {
  properties {
    property 'sonar.projectName', 'Saros/Eclipse'
    property 'sonar.projectDescription', 'Saros plugin for the Eclipse IDE'
    property 'sonar.projectVersion', '14.11.28.DEVEL'
    property 'sonar.exclusion', '**/Messages.java'
    // necessary to avoid the scanning of stf
    property 'sonar.sources', 'src'
    property 'sonar.tests', 'test/junit', 'test/stf'
  }
}
